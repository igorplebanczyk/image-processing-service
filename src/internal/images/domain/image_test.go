package domain

import (
	"encoding/base64"
	"github.com/google/uuid"
	"testing"
)

func TestValidateName(t *testing.T) {
	type args struct {
		name string
	}
	tests := []struct {
		name    string
		args    args
		wantErr bool
	}{
		{
			"Valid name",
			args{name: "JohnDoe"},
			false,
		},
		{
			"Name too short",
			args{name: "JD"},
			true,
		},
		{
			"Name too long",
			args{name: string(make([]byte, 129))},
			true,
		},
		{
			"Name contains spaces",
			args{name: "John Doe"},
			true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			err := ValidateName(tt.args.name)
			if (err != nil) != tt.wantErr {
				t.Fatalf("ValidateName() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

func TestValidateDescription(t *testing.T) {
	type args struct {
		description string
	}
	tests := []struct {
		name    string
		args    args
		wantErr bool
	}{
		{
			"Valid description",
			args{description: "This is a description"},
			false,
		},
		{
			"Description too long",
			args{description: string(make([]byte, 1025))},
			true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			err := ValidateDescription(tt.args.description)
			if (err != nil) != tt.wantErr {
				t.Fatalf("ValidateDescription() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

func TestValidateImage(t *testing.T) {
	type args struct {
		imageBytes []byte
	}
	tests := []struct {
		name    string
		args    args
		wantErr bool
	}{
		{
			"Valid Image",
			args{imageBytes: validImage},
			false,
		},
		{
			"Image too large",
			args{imageBytes: make([]byte, MaxImageSize+1)},
			true,
		},
		{
			"Invalid Image Format",
			args{imageBytes: []byte("invalid")},
			true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			err := ValidateImage(tt.args.imageBytes)
			if (err != nil) != tt.wantErr {
				t.Fatalf("ValidateRawImage() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

func TestDetermineImageMetadataToUpdate(t *testing.T) {
	type args struct {
		existingImageMetadata *ImageMetadata
		newName               string
		newDescription        string
	}
	tests := []struct {
		name    string
		args    args
		want    string
		want1   string
		wantErr bool
	}{
		{
			"Update name and description",
			args{
				existingImageMetadata: &ImageMetadata{
					Name:        "OldName",
					Description: "OldDescription",
				},
				newName:        "NewName",
				newDescription: "NewDescription",
			},
			"NewName",
			"NewDescription",
			false,
		},
		{
			"Update name",
			args{
				existingImageMetadata: &ImageMetadata{
					Name:        "OldName",
					Description: "OldDescription",
				},
				newName:        "NewName",
				newDescription: "",
			},
			"NewName",
			"OldDescription",
			false,
		},
		{
			"Update description",
			args{
				existingImageMetadata: &ImageMetadata{
					Name:        "OldName",
					Description: "OldDescription",
				},
				newName:        "",
				newDescription: "NewDescription",
			},
			"OldName",
			"NewDescription",
			false,
		},
		{
			"Update nothing",
			args{
				existingImageMetadata: &ImageMetadata{
					Name:        "OldName",
					Description: "OldDescription",
				},
				newName:        "",
				newDescription: "",
			},
			"",
			"",
			true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, got1, err := DetermineImageMetadataToUpdate(tt.args.existingImageMetadata, tt.args.newName, tt.args.newDescription)
			if (err != nil) != tt.wantErr {
				t.Errorf("DetermineImageMetadataToUpdate() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("DetermineImageMetadataToUpdate() got = %v, want %v", got, tt.want)
			}
			if got1 != tt.want1 {
				t.Errorf("DetermineImageMetadataToUpdate() got1 = %v, want %v", got1, tt.want1)
			}
		})
	}
}

func TestCreateFullImageObjectName(t *testing.T) {
	type args struct {
		id uuid.UUID
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{
			"Create full image object name",
			args{id: uuid.MustParse("00000000-0000-0000-0000-000000000000")},
			"full-00000000-0000-0000-0000-000000000000",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := CreateFullImageObjectName(tt.args.id); got != tt.want {
				t.Errorf("CreateFullImageObjectName() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestCreatePreviewImageObjectName(t *testing.T) {
	type args struct {
		id uuid.UUID
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{
			"Create preview image object name",
			args{id: uuid.MustParse("00000000-0000-0000-0000-000000000000")},
			"prev-00000000-0000-0000-0000-000000000000",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := CreatePreviewImageObjectName(tt.args.id); got != tt.want {
				t.Errorf("CreatePreviewImageObjectName() = %v, want %v", got, tt.want)
			}
		})
	}
}

var validImage, _ = base64.StdEncoding.DecodeString(``)
