x-logging:
  &logging
  driver: "json-file"
  options:
    max-size: "32m"
    max-file: "10"
    tag: "{{.Name}}"

services:
  app:
    build:
      context: .
      dockerfile: docker/app/Dockerfile
      args:
        - PORT=${APP_PORT}
    labels:
      logging: "promtail"
      logging_jobname: "app"
      traefik.enable: true
      traefik.http.routers.app.rule: Host(`localhost`)
      traefik.http.middlewares.ratelimiter.rateLimit.average: 100
      traefik.http.middlewares.ratelimiter.rateLimit.burst: 200
      traefik.http.middlewares.payloadLimiter.buffering.maxRequestBodyBytes: 10485760
      traefik.http.routers.app.middlewares: ratelimiter, payloadLimiter
    logging: *logging
    env_file:
      - .env
    networks:
      - core
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  postgres:
    build:
      context: .
      dockerfile: docker/postgres/Dockerfile
      args:
        - PORT=${POSTGRES_PORT}
        - USER=${POSTGRES_USER}
        - PASSWORD=${POSTGRES_PASSWORD}
        - DB=${POSTGRES_DB}
    logging: *logging
    env_file:
      - .env
    networks:
      - core
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    build:
      context: .
      dockerfile: docker/redis/Dockerfile
      args:
        - PORT=${REDIS_PORT}
    logging: *logging
    env_file:
      - .env
    networks:
      - core
    volumes:
      - redis_data:/data

  prometheus:
    build:
      context: .
      dockerfile: docker/prometheus/Dockerfile
    logging: *logging
    networks:
      - core
    volumes:
      - prometheus_data:/prometheus
    depends_on:
      - app

  promtail:
    build:
        context: .
        dockerfile: docker/promtail/Dockerfile
    logging: *logging
    networks:
      - core
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock

  loki:
    build:
        context: .
        dockerfile: docker/loki/Dockerfile
    logging: *logging
    networks:
      - core

  grafana:
    build:
        context: .
        dockerfile: docker/grafana/Dockerfile
    labels:
      traefik.enable: true
      traefik.http.routers.grafana.rule: Host(`grafana.localhost`)
      traefik.http.services.grafana.loadbalancer.server.port: 3000
    logging: *logging
    env_file:
      - .env
    networks:
      - core
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - loki

  traefik:
    build:
      context: .
      dockerfile: docker/traefik/Dockerfile
    logging: *logging
    env_file:
      - .env
    ports:
      - "80:80"
    networks:
      - core
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

networks:
  core:
    name: core
    driver: bridge

volumes:
  postgres_data:
    name: postgres_data
  redis_data:
    name: redis_data
  prometheus_data:
    name: prometheus_data
    driver: local
  grafana_data:
    name: grafana_data
    driver: local
